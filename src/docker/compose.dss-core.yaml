version: "3.9"

include:
  - compose.database.yaml

# The processor is kept in its own template file since it needs to be
# configured differently when running against a local vs public chain.
services:
  aggregator:
    build:
      context: ../../
      dockerfile: src/docker/aggregator/Dockerfile
    depends_on:
      diesel:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      APTOS_NETWORK: ${APTOS_NETWORK}
      DATABASE_URL: "postgres://econia:econia@postgres:5432/econia"
    restart: unless-stopped

  grafana_annotations:
    build:
      context: ../../
      dockerfile: src/docker/grafana_annotations/Dockerfile
    depends_on:
      diesel:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgres://econia:econia@postgres:5432/econia"
    volumes:
      - "./grafana_annotations/annotations.csv:/annotations.csv"

  postgrest:
    depends_on:
      diesel:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      PGRST_DB_URI: "postgres://econia:econia@postgres:5432/econia"
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_DB_SCHEMA: api
      PGRST_DB_MAX_ROWS: 100
    image: postgrest/postgrest
    ports:
      - "3000:3000"
    restart: unless-stopped

  ws:
    build:
      context: ../../
      dockerfile: src/docker/api/Dockerfile.ws
      args:
        - POSTGRES_WEBSOCKETS_VERSION=0.11.1.0
    depends_on:
      diesel:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      - PGWS_DB_URI=postgres://econia:econia@postgres/econia
      # This has to be at least 32 characters long.
      - PGWS_JWT_SECRET=econia_0000000000000000000000000
      - PGWS_CHECK_LISTENER_INTERVAL=1000
      - PGWS_LISTEN_CHANNEL=econiaws
    ports:
      - "3001:3000"
    restart: unless-stopped
